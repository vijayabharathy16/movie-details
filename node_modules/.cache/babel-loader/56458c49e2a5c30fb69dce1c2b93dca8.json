{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport API from \"../API\";\nconst initialState = {\n  page: 0,\n  results: [],\n  total_pages: 0,\n  total_results: 0\n};\nexport const useHomeFetch = () => {\n  _s();\n\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [state, setState] = useState(initialState);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n  const [isLoadingMore, setIsLoadingMore] = useState(false);\n\n  const fetchMovies = async (page, searchTerm = \"\") => {\n    try {\n      setError(false);\n      setLoading(true);\n      const movies = await API.fetchMovies(searchTerm, page);\n      setState(prev => ({ ...movies,\n        results: page > 1 ? [...prev.results, ...movies.results] : [...movies.results]\n      }));\n    } catch (error) {\n      setError(true);\n    }\n\n    setLoading(false);\n  }; //initial render and search\n\n\n  useEffect(() => {\n    setState(initialState);\n    fetchMovies(1, searchTerm);\n  }, [searchTerm]); //Load More\n\n  useEffect(() => {\n    if (!isLoadingMore) return;\n    fetchMovies(state.page + 1, searchTerm);\n    setIsLoadingMore(false);\n  }, [isLoadingMore, searchTerm, state.page]);\n  return {\n    state,\n    loading,\n    error,\n    searchTerm,\n    setSearchTerm,\n    setIsLoadingMore\n  };\n};\n\n_s(useHomeFetch, \"hLAeH0knzlTBASO9UvEWRhGZwmw=\");","map":{"version":3,"sources":["C:/Projects/movie-details/src/Hooks/useHomeFetch.js"],"names":["useState","useEffect","API","initialState","page","results","total_pages","total_results","useHomeFetch","searchTerm","setSearchTerm","state","setState","loading","setLoading","error","setError","isLoadingMore","setIsLoadingMore","fetchMovies","movies","prev"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,GAAP,MAAgB,QAAhB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAE,CADa;AAEnBC,EAAAA,OAAO,EAAE,EAFU;AAGnBC,EAAAA,WAAW,EAAE,CAHM;AAInBC,EAAAA,aAAa,EAAE;AAJI,CAArB;AAOA,OAAO,MAAMC,YAAY,GAAG,MAAM;AAAA;;AAChC,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BV,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACW,KAAD,EAAQC,QAAR,IAAoBZ,QAAQ,CAACG,YAAD,CAAlC;AACA,QAAM,CAACU,OAAD,EAAUC,UAAV,IAAwBd,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACe,KAAD,EAAQC,QAAR,IAAoBhB,QAAQ,CAAC,KAAD,CAAlC;AACA,QAAM,CAACiB,aAAD,EAAgBC,gBAAhB,IAAoClB,QAAQ,CAAC,KAAD,CAAlD;;AAEA,QAAMmB,WAAW,GAAG,OAAOf,IAAP,EAAaK,UAAU,GAAG,EAA1B,KAAiC;AACnD,QAAI;AACFO,MAAAA,QAAQ,CAAC,KAAD,CAAR;AACAF,MAAAA,UAAU,CAAC,IAAD,CAAV;AAEA,YAAMM,MAAM,GAAG,MAAMlB,GAAG,CAACiB,WAAJ,CAAgBV,UAAhB,EAA4BL,IAA5B,CAArB;AAEAQ,MAAAA,QAAQ,CAAES,IAAD,KAAW,EAClB,GAAGD,MADe;AAElBf,QAAAA,OAAO,EACLD,IAAI,GAAG,CAAP,GACE,CAAC,GAAGiB,IAAI,CAAChB,OAAT,EAAkB,GAAGe,MAAM,CAACf,OAA5B,CADF,GAEE,CAAC,GAAGe,MAAM,CAACf,OAAX;AALc,OAAX,CAAD,CAAR;AAOD,KAbD,CAaE,OAAOU,KAAP,EAAc;AACdC,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACD;;AACDF,IAAAA,UAAU,CAAC,KAAD,CAAV;AACD,GAlBD,CAPgC,CA2BhC;;;AACAb,EAAAA,SAAS,CAAC,MAAM;AACdW,IAAAA,QAAQ,CAACT,YAAD,CAAR;AAEAgB,IAAAA,WAAW,CAAC,CAAD,EAAIV,UAAJ,CAAX;AACD,GAJQ,EAIN,CAACA,UAAD,CAJM,CAAT,CA5BgC,CAkChC;;AACAR,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACgB,aAAL,EAAoB;AAEpBE,IAAAA,WAAW,CAACR,KAAK,CAACP,IAAN,GAAa,CAAd,EAAiBK,UAAjB,CAAX;AACAS,IAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACD,GALQ,EAKN,CAACD,aAAD,EAAgBR,UAAhB,EAA4BE,KAAK,CAACP,IAAlC,CALM,CAAT;AAOA,SAAO;AAAEO,IAAAA,KAAF;AAASE,IAAAA,OAAT;AAAkBE,IAAAA,KAAlB;AAAyBN,IAAAA,UAAzB;AAAqCC,IAAAA,aAArC;AAAoDQ,IAAAA;AAApD,GAAP;AACD,CA3CM;;GAAMV,Y","sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport API from \"../API\";\r\n\r\nconst initialState = {\r\n  page: 0,\r\n  results: [],\r\n  total_pages: 0,\r\n  total_results: 0,\r\n};\r\n\r\nexport const useHomeFetch = () => {\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n  const [state, setState] = useState(initialState);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(false);\r\n  const [isLoadingMore, setIsLoadingMore] = useState(false);\r\n\r\n  const fetchMovies = async (page, searchTerm = \"\") => {\r\n    try {\r\n      setError(false);\r\n      setLoading(true);\r\n\r\n      const movies = await API.fetchMovies(searchTerm, page);\r\n\r\n      setState((prev) => ({\r\n        ...movies,\r\n        results:\r\n          page > 1 \r\n          ? [...prev.results, ...movies.results] \r\n          : [...movies.results],\r\n      }));\r\n    } catch (error) {\r\n      setError(true);\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  //initial render and search\r\n  useEffect(() => {\r\n    setState(initialState);\r\n\r\n    fetchMovies(1, searchTerm);\r\n  }, [searchTerm]);\r\n\r\n  //Load More\r\n  useEffect(() => {\r\n    if (!isLoadingMore) return;\r\n\r\n    fetchMovies(state.page + 1, searchTerm);\r\n    setIsLoadingMore(false);\r\n  }, [isLoadingMore, searchTerm, state.page]);\r\n\r\n  return { state, loading, error, searchTerm, setSearchTerm, setIsLoadingMore };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}