{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projects\\\\movie-details\\\\src\\\\components\\\\Actors.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useParams } from \"react-router\";\nimport BreadCrumb from \"./BreadCrumb\";\nimport Grid from \"./Grid\";\nimport Spinner from \"./Spinner\";\nimport ActorsPage from \"./ActorsPage\";\nimport Thumb from \"./Thumb\";\nimport { IMAGE_BASE_URL, POSTER_SIZE } from \"../config\";\nimport { useActorFetch } from \"../Hooks/useActorFetch\";\nimport NoImage from \"../images/no_image.jpg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Actors = () => {\n  _s();\n\n  const {\n    actorId\n  } = useParams();\n  const {\n    state: actor,\n    loading,\n    error\n  } = useActorFetch(actorId);\n  if (loading) return /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 25\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Something went wrong!..\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(BreadCrumb, {\n      movieTitle: actor.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ActorsPage, {\n      actor: actor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      header: actor.name + \" Movies\",\n      children: actor.actorCasted.cast.map(movie => /*#__PURE__*/_jsxDEV(Thumb, {\n        clickable: true,\n        image: movie.poster_path ? IMAGE_BASE_URL + POSTER_SIZE + movie.poster_path : NoImage,\n        movieId: movie.id\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Actors, \"Lw9tNEXdRl91vuKWGdRrZAyf3hs=\", false, function () {\n  return [useParams, useActorFetch];\n});\n\n_c = Actors;\nexport default Actors;\n\nvar _c;\n\n$RefreshReg$(_c, \"Actors\");","map":{"version":3,"sources":["C:/Projects/movie-details/src/components/Actors.js"],"names":["React","useParams","BreadCrumb","Grid","Spinner","ActorsPage","Thumb","IMAGE_BASE_URL","POSTER_SIZE","useActorFetch","NoImage","Actors","actorId","state","actor","loading","error","name","actorCasted","cast","map","movie","poster_path","id"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,cAA1B;AAEA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AAEA,SAASC,cAAT,EAAyBC,WAAzB,QAA4C,WAA5C;AAEA,SAASC,aAAT,QAA8B,wBAA9B;AAEA,OAAOC,OAAP,MAAoB,wBAApB;;;;AAEA,MAAMC,MAAM,GAAG,MAAM;AAAA;;AACjB,QAAM;AAAEC,IAAAA;AAAF,MAAcX,SAAS,EAA7B;AACA,QAAM;AAACY,IAAAA,KAAK,EAAEC,KAAR;AAAeC,IAAAA,OAAf;AAAwBC,IAAAA;AAAxB,MAAiCP,aAAa,CAACG,OAAD,CAApD;AAEA,MAAIG,OAAJ,EAAa,oBAAO,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,UAAP;AACb,MAAIC,KAAJ,EAAW,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAEX,sBACI;AAAA,4BACA,QAAC,UAAD;AAAY,MAAA,UAAU,EAAEF,KAAK,CAACG;AAA9B;AAAA;AAAA;AAAA;AAAA,YADA,eAEA,QAAC,UAAD;AAAY,MAAA,KAAK,EAAEH;AAAnB;AAAA;AAAA;AAAA;AAAA,YAFA,eAGA,QAAC,IAAD;AAAM,MAAA,MAAM,EAAEA,KAAK,CAACG,IAAN,GAAa,SAA3B;AAAA,gBACCH,KAAK,CAACI,WAAN,CAAkBC,IAAlB,CAAuBC,GAAvB,CAA4BC,KAAD,iBAC1B,QAAC,KAAD;AAEE,QAAA,SAAS,MAFX;AAGE,QAAA,KAAK,EACHA,KAAK,CAACC,WAAN,GACIf,cAAc,GAAGC,WAAjB,GAA+Ba,KAAK,CAACC,WADzC,GAEIZ,OANR;AAQE,QAAA,OAAO,EAAEW,KAAK,CAACE;AARjB,SACOF,KAAK,CAACE,EADb;AAAA;AAAA;AAAA;AAAA,cADD;AADD;AAAA;AAAA;AAAA;AAAA,YAHA;AAAA,kBADJ;AAoBH,CA3BD;;GAAMZ,M;UACkBV,S,EACmBQ,a;;;KAFrCE,M;AA8BN,eAAeA,MAAf","sourcesContent":["import React from \"react\";\r\nimport { useParams } from \"react-router\";\r\n\r\nimport BreadCrumb from \"./BreadCrumb\";\r\nimport Grid from \"./Grid\";\r\nimport Spinner from \"./Spinner\";\r\nimport ActorsPage from \"./ActorsPage\";\r\nimport Thumb from \"./Thumb\";\r\n\r\nimport { IMAGE_BASE_URL, POSTER_SIZE } from \"../config\";\r\n\r\nimport { useActorFetch } from \"../Hooks/useActorFetch\";\r\n\r\nimport NoImage from \"../images/no_image.jpg\";\r\n\r\nconst Actors = () => {\r\n    const { actorId } = useParams();\r\n    const {state: actor, loading, error} = useActorFetch(actorId);\r\n\r\n    if (loading) return <Spinner />;\r\n    if (error) return <div>Something went wrong!..</div>;\r\n\r\n    return (\r\n        <>\r\n        <BreadCrumb movieTitle={actor.name} />\r\n        <ActorsPage actor={actor} />\r\n        <Grid header={actor.name + \" Movies\"} >\r\n        {actor.actorCasted.cast.map((movie) => (\r\n          <Thumb\r\n            key={movie.id}\r\n            clickable\r\n            image={\r\n              movie.poster_path\r\n                ? IMAGE_BASE_URL + POSTER_SIZE + movie.poster_path\r\n                : NoImage\r\n            }\r\n            movieId={movie.id}\r\n          />\r\n        ))}\r\n        </Grid>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default Actors;\r\n"]},"metadata":{},"sourceType":"module"}